{
	"info": {
		"_postman_id": "6c78696a-86db-4ffa-93a3-1d9a86702d22",
		"name": "_e-bx_assessment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get contributors for given repo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*\r",
							"Scenario:\r",
							"Given a GitHub owner and repo\r",
							"When requesting GET /api/v1/{owner}/{repo}/contributors\r",
							"Then return the authors of the last 30 commits in the given repo\r",
							"*/\r",
							"\r",
							"// Load Postman BDD\r",
							"eval(globals.postmanBDD);\r",
							"\r",
							"describe(\"Tests the Github contributors api\", function() {\r",
							"    it('Should have a login string found in the response', () => {\r",
							"       pm.expect(pm.response.text()).to.include(\"login\");\r",
							"\t});\r",
							"\r",
							"    it('Should have a correct content type header', () => {\r",
							"       pm.expect(pm.response).to.have.header('content-type', 'application/json; charset=utf-8');\r",
							"\t});\r",
							"\r",
							"    it('Should display a successful request status code range', () => {\r",
							"       pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
							"\t});\r",
							"\r",
							"    it('Should contain an key with a name of a valid github user', () => {\r",
							"       const jsdonData = pm.response.json();\r",
							"       pm.expect( jsdonData[0].login).to.eql('himal-mandalia');\r",
							"\t});\r",
							"\r",
							"    it('Should have an array / contributors count of 30\"', () => {\r",
							"       const jsdonData = pm.response.json();\r",
							"       pm.expect( jsdonData[0].login).to.eql('himal-mandalia');\r",
							"\t});\r",
							"\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.github.com/repos/DFE-Digital/technical-guidance/contributors?per_page=30",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"repos",
						"DFE-Digital",
						"technical-guidance",
						"contributors"
					],
					"query": [
						{
							"key": "per_page",
							"value": "30"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Dummy Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*\r",
							"Scenario:\r",
							"Given a GitHub owner or repo that does not exist on GitHub\r",
							"When requesting GET /api/v1/{owner}/{repo}/contributors\r",
							"Then return HTTP 404\r",
							"And a message in the body reading “Either owner or repo does not exist on GitHub”\r",
							"*/\r",
							"\r",
							"// Load Postman BDD\r",
							"eval(globals.postmanBDD);\r",
							"\r",
							"describe(\"Tests that an invalid response returns 404\", function() {\r",
							"    it('Should retrun the correct response message', () => {\r",
							"       pm.expect(pm.response.text()).to.include(\"Either owner or repo does not exist on GitHub\");\r",
							"\t});\r",
							"\r",
							"    it('Should have a status code in the 400 range', () => {\r",
							"       pm.expect(pm.response.code).to.be.oneOf([404]);\r",
							"\t});\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.github.com/repos/dummy**owner//dummy**repo/contributors",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"repos",
						"dummy**owner",
						"",
						"dummy**repo",
						"contributors"
					]
				}
			},
			"response": [
				{
					"name": "Dummy Request",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.github.com/repos/dummy**owner//dummy**repo/contributors",
							"protocol": "https",
							"host": [
								"api",
								"github",
								"com"
							],
							"path": [
								"repos",
								"dummy**owner",
								"",
								"dummy**repo",
								"contributors"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "GitHub.com"
						},
						{
							"key": "Date",
							"value": "Fri, 07 Oct 2022 14:00:29 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "X-GitHub-Media-Type",
							"value": "github.v3; format=json"
						},
						{
							"key": "Access-Control-Expose-Headers",
							"value": "ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO, X-GitHub-Request-Id, Deprecation, Sunset"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Strict-Transport-Security",
							"value": "max-age=31536000; includeSubdomains; preload"
						},
						{
							"key": "X-Frame-Options",
							"value": "deny"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-XSS-Protection",
							"value": "0"
						},
						{
							"key": "Referrer-Policy",
							"value": "origin-when-cross-origin, strict-origin-when-cross-origin"
						},
						{
							"key": "Content-Security-Policy",
							"value": "default-src 'none'"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding, Accept, X-Requested-With"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "60"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "46"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1665152946"
						},
						{
							"key": "X-RateLimit-Resource",
							"value": "core"
						},
						{
							"key": "X-RateLimit-Used",
							"value": "14"
						},
						{
							"key": "Content-Length",
							"value": "91"
						},
						{
							"key": "X-GitHub-Request-Id",
							"value": "A028:5A22:518C458:52BD6A2:634030FD"
						}
					],
					"cookie": [],
					"body": "{\n    \"message\": \"Either owner or repo does not exist on GitHub\",\n    \"documentation_url\": \"https://docs.github.com/rest\"\n}"
				}
			]
		},
		{
			"name": "postman bdd install",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		}
	]
}